{"version":3,"sources":["Chart/CountChart.js","Chart/DeathsChart.js","App.js","index.js"],"names":["CountChart","props","canvasElementRef","React","createRef","this","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","yAxisID","chart","Chart","current","type","options","scales","yAxes","beginAtZero","position","id","regionData","map","stats","date","getFullYear","getMonth","getDate","count","change","reduce","pv","push","update","ref","Component","DeathsChart","deaths","App","state","regionId","regions","fetchData","prevProps","prevState","Math","max","region","e","setState","target","value","url","fetch","response","json","Date","_id","sort","a","b","valueOf","regionOptions","key","name","unshift","className","class","totalCount","deathsCount","onChange","onChangeRegion","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a161e183.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\n\nclass CountChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasElementRef = React.createRef();\n    }\n    componentDidMount() {\n        this.chartData = {\n            labels: [],\n            datasets: [{\n                label: 'liczba zachorowań',\n                data: [],\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n                yAxisID: 'y-axis-1'\n            }, {\n                label: 'wzrost',\n                data: [],\n                backgroundColor: 'rgba(132, 99, 255, 0.2)',\n                borderColor: 'rgba(132, 99, 255, 1)',\n                borderWidth: 1,\n                yAxisID: 'y-axis-2'\n            }]\n        };\n        this.chart = new Chart(this.canvasElementRef.current, {\n            type: 'line',\n            data: this.chartData,\n            options: {\n                scales: {\n                    yAxes: [{\n                        type: 'linear',\n                        beginAtZero: true,\n                        position: 'left',\n                        id: 'y-axis-1',\n\n                    }, {\n                        type: 'linear',\n                        beginAtZero: true,\n                        position: 'right',\n                        id: 'y-axis-2',\n\n                    }]\n                }\n            }\n        })\n    }\n    componentDidUpdate() {\n        this.chartData.labels = this.props.regionData.map(stats => `${stats.date.getFullYear()}-${stats.date.getMonth() + 1}-${stats.date.getDate()}`);\n        this.chartData.datasets[0].data = this.props.regionData.map(stats => stats.count);\n        const change = [null];\n        this.props.regionData.reduce((pv, stats) => {\n            change.push(stats.count - pv.count);\n            return stats;\n        });\n        this.chartData.datasets[1].data = change;\n        this.chart.update();\n    }\n    render() {\n        return <canvas ref={this.canvasElementRef} />;\n    }\n}\n\nexport default CountChart;","import React from 'react';\nimport Chart from 'chart.js';\n\nclass DeathsChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasElementRef = React.createRef();\n    }\n    componentDidMount() {\n        this.chartData = {\n            labels: [],\n            datasets: [{\n                label: 'liczba zgonów',\n                data: [],\n                backgroundColor: 'rgba(0, 0, 0, 0.2)',\n                borderColor: 'rgba(0, 0, 0, 0.9)',\n                borderWidth: 1\n            }, {\n                label: 'wzrost',\n                data: [],\n                backgroundColor: 'rgba(99, 255, 132, 0.2)',\n                borderColor: 'rgba(99, 255, 132, 1)',\n                borderWidth: 1,\n                yAxisID: 'y-axis-2'\n            }]\n        };\n        this.chart = new Chart(this.canvasElementRef.current, {\n            type: 'line',\n            data: this.chartData,\n            options: {\n                scales: {\n                    yAxes: [{\n                        type: 'linear',\n                        beginAtZero: true,\n                        position: 'left',\n                        id: 'y-axis-1',\n\n                    }, {\n                        type: 'linear',\n                        beginAtZero: true,\n                        position: 'right',\n                        id: 'y-axis-2',\n\n                    }]\n                }\n            }\n        });\n    }\n    componentDidUpdate() {\n        this.chartData.labels = this.props.regionData.map(stats => `${stats.date.getFullYear()}-${stats.date.getMonth() + 1}-${stats.date.getDate()}`);\n        this.chartData.datasets[0].data = this.props.regionData.map(stats => stats.deaths);\n        const change = [null];\n        this.props.regionData.reduce((pv, stats) => {\n            change.push(stats.deaths - pv.deaths);\n            return stats;\n        });\n        this.chartData.datasets[1].data = change;\n        this.chart.update();\n    }\n    render() {\n        return <canvas ref={this.canvasElementRef} />;\n    }\n}\n\nexport default DeathsChart;","import React from 'react';\nimport './App.css';\nimport CountChart from './Chart/CountChart.js';\nimport DeathsChart from './Chart/DeathsChart.js';\n\nconst HOST = `https://koronawirus.herokuapp.com`;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        regionId: \"\",\n        regionData: [],\n        regions: [{ \"id\": \"t02\", \"name\": \"dolnośląskie\" }, { \"id\": \"t04\", \"name\": \"kujawsko-pomorskie\" }, { \"id\": \"t06\", \"name\": \"lubelskie\" }, { \"id\": \"t08\", \"name\": \"lubuskie\" }, { \"id\": \"t10\", \"name\": \"łódzkie\" }, { \"id\": \"t12\", \"name\": \"małopolskie\" }, { \"id\": \"t14\", \"name\": \"mazowieckie\" }, { \"id\": \"t16\", \"name\": \"opolskie\" }, { \"id\": \"t18\", \"name\": \"podkarpackie\" }, { \"id\": \"t20\", \"name\": \"podlaskie\" }, { \"id\": \"t22\", \"name\": \"pomorskie\" }, { \"id\": \"t24\", \"name\": \"śląskie\" }, { \"id\": \"t26\", \"name\": \"świętokrzyskie\" }, { \"id\": \"t28\", \"name\": \"warmińsko-mazurskie\" }, { \"id\": \"t30\", \"name\": \"wielkopolskie\" }, { \"id\": \"t32\", \"name\": \"zachodniopomorskie\" }]\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.regionId !== prevState.regionId) {\n      this.fetchData();\n    }\n  }\n\n  totalCount() {\n    return Math.max(...this.state.regionData.map(region => region.count));\n  }\n\n  deathsCount() {\n    return Math.max(...this.state.regionData.map(region => region.deaths));\n  }\n  \n  onChangeRegion(e) {\n    this.setState({regionId: e.target.value});\n  }\n\n  async fetchData() {\n    let url = `${HOST}/total/`;\n    if (this.state.regionId) {\n        url += `${this.state.regionId}/`;\n    }\n    const response = await fetch(url);\n    const data = await response.json();\n    const regionData = data.map(stats => {\n        return {\n            date: new Date(stats._id),\n            deaths: stats.deaths,\n            count: stats.count\n        }\n    }).sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    this.setState({\n      regionData: regionData\n    });\n  }\n  render() {\n    const regionOptions = this.state.regions.map(region => <option key={region.id} value={region.id}>{region.name}</option>);\n    regionOptions.unshift(<option value=\"\" key=\"t00\" >Cała Polska</option>)\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 class=\"header-section\">Koronawirus w Polsce</h1>\n          <div class=\"header-section number-tiles\">Total: {this.totalCount()}</div>\n          <div class=\"header-section number-tiles\">Deaths: {this.deathsCount()}</div>\n          <div class=\"header-section\">\n            <select id=\"region\" onChange={this.onChangeRegion.bind(this)} value={this.state.regionId}>\n              {regionOptions}\n            </select>\n          </div>\n        </header>\n        <CountChart regionData={this.state.regionData} />\n        <DeathsChart regionData={this.state.regionData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}